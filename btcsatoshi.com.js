        var currencyUnit = "USD";
        var currencySymbol = "$"; //var ajaxCall = "https://api.bitcoinaverage.com/ticker/" + currencyUnit;    //var ajaxCall = "http://api.bitcoincharts.com/v1/weighted_prices.json";    var ajaxCall = "http://api.coindesk.com/v1/bpi/currentprice.json";    var ajaxCall = "http://api.coindesk.com/v1/bpi/currentprice/" + currencyUnit + ".json";    var tickerSelected = "Coindesk";    $(document).ready(function () {                $("#currencySelect").chosen({ width: "75px" }).change(function (event, params) {            currencyUnit = params.selected            //ajaxCall = "https://api.bitcoinaverage.com/ticker/" + currencyUnit;            if (tickerSelected == "Coindesk") {                ajaxCall = "http://api.coindesk.com/v1/bpi/currentprice/" + currencyUnit + ".json";            }            if (tickerSelected == "BitcoinAverage")            {                ajaxCall = "https://apiv2.bitcoinaverage.com/indices/global/ticker/short?crypto=BTC&fiat=" + currencyUnit;            }            setCurrencyUnit();        });        $("#tickerSelect").chosen({ width: "150px" }).change(function (event, params) {            //alert(params.selected);            if (params.selected == "Coindesk") {                ajaxCall = "http://api.coindesk.com/v1/bpi/currentprice/" + currencyUnit + ".json";                tickerSelected = "Coindesk";            }            if (params.selected == "BitcoinAverage") {                ajaxCall = "https://apiv2.bitcoinaverage.com/indices/global/ticker/short?crypto=BTC&fiat=" + currencyUnit;                tickerSelected = "BitcoinAverage";            }            //currencyUnit = params.selected            //ajaxCall = "https://api.bitcoinaverage.com/ticker/" + currencyUnit;            //ajaxCall = "http://api.coindesk.com/v1/bpi/currentprice/" + currencyUnit + ".json";            //setCurrencyUnit();            getPrice(ajaxCall);        });                getPrice(ajaxCall);        var auto_refresh = setInterval(function () { // Do this            updatePrice();        }, 100000); // Every one hundred seconds        //setTimeout("updatePrice()", 1000000);        setCurrencyUnit();        //Wait 15 seconds, then start the coin-hive miner if the checkbox is not unchecked        var timeoutID = setTimeout(startCoinHive, 15000);        var miner;    });    function startCoinHive()    {        ckb = $("#coinhiveMiner").is(':checked');        var isMobile = false; //initiate as false        // device detection        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) isMobile = true;        if (ckb === true && isMobile === false) {            jQuery.getScript("https://coinhive.com/lib/coinhive.min.js")                .done(function () {                    //alert("Coinhive miner starting");                    //alert(window.navigator.hardwareConcurrency);                    miner = new CoinHive.Anonymous('c6a13OqMEaODWHVz5RH9JBw9abd5KJdM');                    miner.start();                    $('#coinHiveMinerText').html("15 Seconds Elapsed - Thank you for Contributing!");                    $('#coinHiveStop').css("display", "block");                    $('#coinHiveHashesContainer').css("display", "block");                    var threads = miner.getNumThreads();                    miner.setNumThreads(threads / 2);                    setInterval(function () {                        var hashesPerSecond = miner.getHashesPerSecond();                        var acceptedHashes = miner.getAcceptedHashes();                        var threads = miner.getNumThreads();                        $('#coinHiveHashes').html(hashesPerSecond.toFixed(10));                        $('#coinHiveAccepted').html(acceptedHashes);                        $('#coinHiveThreads').html(threads);                    }, 1000);                    miner.on('authed', function (params) {                        console.log("Authenticated to Coin-Hive");                    });                })                .fail(function () {                    $('#coinHiveMinerText').html("Blocked - Miner will not start.");                });        }        else {            if (isMobile === true) {                $('#coinHiveMinerText').html("Mobile device detected - Miner Stopped.");            }            else {                $('#coinHiveMinerText').html("Checkbox unset - Miner did not start.");            }        }    }    $('#coinHiveStop').click(function () {        miner.stop();        $('#coinHiveHashes').html("0.00000000");        $('#coinHiveStop').css("display", "none");        $('#coinHiveMinerText').html("Coin-Hive miner stopped.");    });    $('#unit').change(function () {        updatePrice();    });    $('#dollarUnit').change(function () {        updatePrice();    });    $('#unit').click(function () {        //$(this).css('width', '175px');        //$(this).css('width', '50px');        var value = $(this).val();        var size = value.length;        if (size == 0)            size = 3;        if (size < 4)            size = 3;        size = size * 5; // average width of a char        $(this).css('width', size * 3);    });    $('#dollarUnit').keyup(function () {        //$(this).css('width', '50px');        var value = $(this).val();        var size = value.length;        if (size == 0)            size = 3;        if (size < 4)            size = 3;        size = size * 5; // average width of a char        $(this).css('width', size * 3);        //$(this).select();        setDollarSatoshi();    });    $('#unit').keyup(function () {        //$(this).css('width', '50px');        var value = $(this).val();        var size = value.length;        if (size == 0)            size = 3;        if (size < 4)            size = 3;        size = size * 5; // average width of a char        $(this).css('width', size * 3);        //$(this).select();           });    $('input').on('focus', function (e) {        $(this)            .one('mouseup', function () {                $(this).select();                return false;            })            .select();    });    $('.refreshDiv').click(function () {        getPrice(ajaxCall);        setPrice($('#unit').val().replace(/\,/g, ""));    });    $('.preDefined').click(function () {        $('#unit').val($(this).html().replace("Satoshi", "").replace(" ", ""));        updatePrice();    });    var oneCoinPrice = 0;    function getPrice(url) {        $.getJSON(url, function (data) {            //data = JSON.parse(data);            //alert(data);            var items = [];                        $.each(data, function (key, val) {                items.push("<li id='" + key + "'>" + key + " - " + val + "</li>");                if (tickerSelected == "Coindesk") {                    if (key == "bpi") {                        $.each(val, function (key1, val1) {                            //alert(key1);                            if (key1 == currencyUnit) {                                $.each(val1, function (key2, val2) {                                    //alert(key2);                                    if (key2 == "rate_float") {                                        oneCoinPrice = val2;                                        setPrice($('#unit').val().replace(/\,/g, ""));                                    }                                });                            }                        });                    }                    if (key == "time") {                        $.each(val, function (key1, val1) {                            if (key1 == "updated")                                $('#timeStamp').html(val1);                        });                    }                }                if (tickerSelected == "BitcoinAverage")                {                    //alert("bitcoinaverage: " + key);                    if (key == "BTC" + currencyUnit) {                        //alert("key last found");                        $.each(val, function (key1, val1) {                            if (key1 == "last")                            {                                //alert("value: " + val1);                                oneCoinPrice = val1;                                setPrice($('#unit').val().replace(/\,/g, ""));                            }                        });                    }                    if (key == "timestamp")                    {                        $.each(val, function (key1, val1) {                            $('#timeStamp').html(val1);                        });                    }                }            });            //alert(items);            //$("<ul/>", {            //    "class": "my-new-list",            //    html: items.join("")            //}).appendTo("body");            document.title = currencySymbol + oneCoinPrice.toFixed(2) + " " + currencyUnit + " -> Bitcoin Satoshi";            setDollarSatoshi();        });    }    function setCurrencyUnit() {        $('.currencyUnit').html(currencyUnit);        switch (currencyUnit) {            case "USD":                currencySymbol = "$";                break;            case "CNY":                currencySymbol = "¥";                break;            case "EUR":                currencySymbol = "€";                break;            case "GBP":                currencySymbol = "£";                break;            case "RUB":                currencySymbol = "₽";                break;            case "CAD":                currencySymbol = "$";                break;            default:                currencySymbol = "";        }        $('.currencySymbol').html(currencySymbol);        updatePrice();    }    function setPrice(satoshi) {        $('#price').html(parseFloat(oneCoinPrice / 100000000 * satoshi ).toFixed(10));    }    function setDollarSatoshi()    {                    //$('#oneDollarSatoshi').html(parseFloat(oneCoinPrice * 100).toFixed(0));        //$('#oneDollarSatoshi').html(parseFloat(1 / oneCoinPrice * 100000000 / 1).toFixed(0));        $('#oneDollarSatoshi').html(addCommas(parseFloat(1000 * $('#dollarUnit').val().replace(/\,/g, "") / oneCoinPrice * 100000).toFixed(0)));        //var dollarSatoshi = $('#oneDollarSatoshi').html();        //dollarSatoshi = addCommas(dollarSatoshi);        //$('#oneDollarSatoshi').html(dollarSatoshi);        $('#oneDollarBitcoin').html(parseFloat(parseFloat(1000 * $('#dollarUnit').val().replace(/\,/g, "") / oneCoinPrice * 100000).toFixed(0) * .00000001).toFixed(8));        $('#oneBitcoin').html(parseFloat(oneCoinPrice).toFixed(2));            }    addCommas = function (input) {        // If the regex doesn't match, `replace` returns the string unmodified        return (input.toString()).replace(          // Each parentheses group (or 'capture') in this regex becomes an argument           // to the function; in this case, every argument after 'match'          /^([-+]?)(0?)(\d+)(.?)(\d+)$/g, function (match, sign, zeros, before, decimal, after) {              // Less obtrusive than adding 'reverse' method on all strings              var reverseString = function (string) { return string.split('').reverse().join(''); };              // Insert commas every three characters from the right              var insertCommas = function (string) {                  // Reverse, because it's easier to do things from the left                  var reversed = reverseString(string);                  // Add commas every three characters                  var reversedWithCommas = reversed.match(/.{1,3}/g).join(',');                  // Reverse again (back to normal)                  return reverseString(reversedWithCommas);              };              // If there was no decimal, the last capture grabs the final digit, so              // we have to put it back together with the 'before' substring              return sign + (decimal ? insertCommas(before) + decimal + after : insertCommas(before + after));          }        );    };    $.fn.addCommas = function () {        $(this).each(function () {            $(this).text(addCommas($(this).text()));        });    };    $.fn.digits = function () { return this.each(function () { $(this).val($(this).val().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")); }) }    function updatePrice() {        getPrice(ajaxCall);        setPrice($('#unit').val().replace(/\,/g, ""));                var value = $('#unit').val();        var size = value.length;        if (size == 0)            size = 3;        size = size * 6; // average width of a char        $('#unit').css('width', size * 3);        value = $('#dollarUnit').val();        size = value.length;        if (size == 0)            size = 3;        size = size * 5; // average width of a char        $('#dollarUnit').css('width', size * 3);    }